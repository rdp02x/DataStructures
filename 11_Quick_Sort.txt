#include <stdio.h>
#include <stdlib.h>

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;   // Store the value of *a in temp
    *a = *b;         // Assign the value of *b to *a
    *b = temp;       // Assign the stored value in temp to *b
}

// Function to partition the array
int partition(int arr[], int low, int high) {
    int pivot = arr[high];      // Select the last element as pivot
    int i = (low - 1);          // Index of the smaller element

    for (int j = low; j <= high - 1; j++) {    // Traverse elements up to the pivot
        if (arr[j] < pivot) {                  // If current element is smaller than pivot
            i++;                               // Move the smaller element index forward
            swap(&arr[i], &arr[j]);            // Swap current element with the element at i
        }
    }
    swap(&arr[i + 1], &arr[high]);             // Place pivot element in the correct position
    return (i + 1);                            // Return partition index
}

// Function to perform quick sort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);    // Partitioning index, arr[pi] is at right place
        quickSort(arr, low, pi - 1);           // Recursively sort elements before partition
        quickSort(arr, pi + 1, high);          // Recursively sort elements after partition
    }
}

// Function to print the array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {              // Loop through each element
        printf("%d ", arr[i]);                 // Print each element followed by space
    }
    printf("\n");                              // Newline at the end of the array output
}

int main() {
    int n;

    // Prompt user to enter the number of elements in the array
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Allocate memory dynamically for the array based on user input
    int* arr = (int*)malloc(n * sizeof(int));
    if (arr == NULL) {                         // Check if memory allocation was successful
        printf("Memory allocation failed\n");
        return 1;                              // Exit if allocation fails
    }

    // Prompt user to input each element
    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Print the original array before sorting
    printf("Original array: ");
    printArray(arr, n);

    // Sort the array using quicksort
    quickSort(arr, 0, n - 1);

    // Print the sorted array
    printf("Sorted array: ");
    printArray(arr, n);

    // Free dynamically allocated memory
    free(arr);
    return 0;
}
