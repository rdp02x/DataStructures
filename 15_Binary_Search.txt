#include <stdio.h>
#include <stdlib.h>

// Function to perform binary search
int binarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {              // Continue while there is a valid range to search
        int mid = (low + high) / 2;    // Calculate the middle index
        if (arr[mid] == key) {         // Check if the middle element is the key
            return mid;                // Return the index if the element is found
        } else if (arr[mid] < key) {   // If key is greater, ignore the left half
            low = mid + 1;
        } else {                       // If key is smaller, ignore the right half
            high = mid - 1;
        }
    }
    return -1;                         // Return -1 if the element is not found
}

int main() {
    int n;

    // Prompt user to enter the number of elements in the array
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Allocate memory dynamically for the array based on user input
    int* arr = (int*)malloc(n * sizeof(int));
    if (arr == NULL) {                 // Check if memory allocation was successful
        printf("Memory allocation failed\n");
        return 1;                      // Exit if allocation fails
    }

    // Prompt user to enter elements in sorted order
    printf("Enter the elements in sorted order:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Prompt user to input the element to search
    int key;
    printf("Enter the element to search: ");
    scanf("%d", &key);

    // Perform binary search to find the element's index
    int index = binarySearch(arr, 0, n - 1, key);

    // Display the result
    if (index != -1) {
        printf("Element found at index %d\n", index);  // Print index if found
    } else {
        printf("Element not found\n");                 // Print message if not found
    }

    // Free dynamically allocated memory
    free(arr);
    return 0;
}
