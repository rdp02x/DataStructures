#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100 // Maximum size for the stack

// Define a structure for the stack
typedef struct {
    char data[MAX_SIZE]; // Array to hold stack elements
    int top;             // Variable to track the top of the stack
} Stack;

// Function to initialize the stack
void initialize(Stack *stack) {
    stack->top = -1; // Set top to -1 indicating the stack is empty
}

// Function to push an element onto the stack
void push(Stack *stack, char value) {
    // Check if the stack is not full
    if (stack->top < MAX_SIZE - 1) {
        stack->data[++stack->top] = value; // Increment top and add the value
    }
}

// Function to pop an element from the stack
char pop(Stack *stack) {
    // Check if the stack is not empty
    if (stack->top >= 0) {
        return stack->data[stack->top--]; // Return the top value and decrement top
    }
    return '\0'; // Return null character if stack is empty
}

// Function to determine the precedence of operators
int precedence(char operator) {
    switch (operator) {
        case '+':
        case '-':
            return 1; // Lowest precedence
        case '*':
        case '/':
            return 2; // Medium precedence
        case '^':
            return 3; // Highest precedence
    }
    return 0; // Return 0 if operator is not recognized
}

// Function to convert infix expression to postfix
void infixToPostfix(const char *infix, char *postfix) {
    Stack operatorStack; // Declare an operator stack
    initialize(&operatorStack); // Initialize the stack
    
    int i, j = 0; // Loop counters
    for (i = 0; infix[i] != '\0'; i++) { // Loop through each character in the infix expression
        if (infix[i] >= '0' && infix[i] <= '9') { // If the character is an operand (number)
            postfix[j++] = infix[i]; // Add it to the postfix expression
        } else if (infix[i] == '(') { // If the character is '(', push it onto the stack
            push(&operatorStack, '(');
        } else if (infix[i] == ')') { // If the character is ')'
            while (operatorStack.top >= 0 && operatorStack.data[operatorStack.top] != '(') {
                postfix[j++] = pop(&operatorStack); // Pop from the stack until '(' is found
            }
            pop(&operatorStack); // Pop '(' from the stack
        } else { // If the character is an operator
            while (operatorStack.top >= 0 && precedence(operatorStack.data[operatorStack.top]) >= precedence(infix[i])) {
                postfix[j++] = pop(&operatorStack); // Pop operators with higher or equal precedence
            }
            push(&operatorStack, infix[i]); // Push the current operator onto the stack
        }
    }
    
    // Pop all the remaining operators from the stack
    while (operatorStack.top >= 0) {
        postfix[j++] = pop(&operatorStack);
    }
    
    postfix[j] = '\0'; // Null-terminate the postfix expression
}

int main() {
    char infix[MAX_SIZE]; // Array to hold the infix expression
    char postfix[MAX_SIZE]; // Array to hold the postfix expression
    
    printf("Enter an infix expression: ");
    scanf("%s", infix); // Read the infix expression from user input
    
    infixToPostfix(infix, postfix); // Convert infix to postfix
    
    printf("Postfix expression: %s\n", postfix); // Display the postfix expression
    
    return 0; // Exit the program
}
