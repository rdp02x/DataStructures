#include <stdio.h>
#include <stdlib.h>

// Function to perform insertion sort
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {            // Start from the second element
        key = arr[i];                    // Set the key as the current element
        j = i - 1;                       // Start comparing with elements to the left
        
        // Shift elements of arr[0..i-1] that are greater than key one position ahead
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];         // Move arr[j] to the right
            j = j - 1;                   // Move to the next element on the left
        }
        arr[j + 1] = key;                // Place the key in its correct position
    }
}

// Function to print the array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {        // Loop through each element
        printf("%d ", arr[i]);           // Print each element followed by space
    }
    printf("\n");                        // Newline at the end of the array output
}

int main() {
    int n;

    // Prompt user to enter the number of elements in the array
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Allocate memory dynamically for the array based on user input
    int* arr = (int*)malloc(n * sizeof(int));
    if (arr == NULL) {                   // Check if memory allocation was successful
        printf("Memory allocation failed\n");
        return 1;                        // Exit if allocation fails
    }

    // Prompt user to input each element
    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Print the original array before sorting
    printf("Original array: ");
    printArray(arr, n);

    // Sort the array using insertion sort
    insertionSort(arr, n);

    // Print the sorted array
    printf("Sorted array: ");
    printArray(arr, n);

    // Free dynamically allocated memory
    free(arr);
    return 0;
}
