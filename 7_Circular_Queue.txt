#include <stdio.h>
#include <stdlib.h>

// Define the structure of a singly linked list node
struct Node {
    int data;               // Data stored in the node
    struct Node* next;      // Pointer to the next node
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;  // Set the node's data
    newNode->next = NULL;   // Initialize the next pointer to NULL
    return newNode;         // Return the newly created node
}

// Function to insert an element at the beginning of the linked list
void insertAtFirst(struct Node** head, int value) {
    struct Node* newNode = createNode(value); // Create a new node
    newNode->next = *head;                     // Point it to the current head
    *head = newNode;                           // Update head to the new node
}

// Function to insert an element at the end of the linked list
void insertAtLast(struct Node** head, int value) {
    struct Node* newNode = createNode(value); // Create a new node
    if (*head == NULL) {
        *head = newNode;                       // If list is empty, set head to new node
        return;
    }
    struct Node* current = *head;             // Start from the head
    while (current->next != NULL) {           // Traverse to the last node
        current = current->next;
    }
    current->next = newNode;                  // Link the new node at the end
}

// Function to insert an element in sorted order
void insertInSorted(struct Node** head, int value) {
    struct Node* newNode = createNode(value); // Create a new node
    if (*head == NULL || (*head)->data >= value) {
        newNode->next = *head;                // Point it to the current head
        *head = newNode;                      // Update head to the new node
        return;
    }
    struct Node* current = *head;             // Start from the head
    while (current->next != NULL && current->next->data < value) {
        current = current->next;               // Traverse to find the correct position
    }
    newNode->next = current->next;            // Insert the new node
    current->next = newNode;
}

// Function to delete an element from the linked list
void deleteElement(struct Node** head, int value) {
    if (*head == NULL)                        // Check if the list is empty
        return;
    if ((*head)->data == value) {             // Check if the head needs to be removed
        struct Node* temp = *head;            // Store the current head
        *head = (*head)->next;                 // Move head to the next node
        free(temp);                            // Free the old head
        return;
    }
    struct Node* current = *head;             // Start from the head
    while (current->next != NULL && current->next->data != value) {
        current = current->next;               // Traverse the list
    }
    if (current->next != NULL) {              // If the value was found
        struct Node* temp = current->next;    // Store the node to be deleted
        current->next = temp->next;           // Bypass the node to delete it
        free(temp);                            // Free the memory
    }
}

// Function to copy a linked list
struct Node* copyLinkedList(struct Node* head) {
    struct Node* newHead = NULL;              // New head for the copied list
    struct Node* current = head;               // Pointer to traverse the original list
    struct Node* tail = NULL;                  // Pointer to the last node in the new list
    while (current != NULL) {
        struct Node* newNode = createNode(current->data); // Create a new node
        if (newHead == NULL) {                 // If new list is empty
            newHead = newNode;                 // Set it as the head
            tail = newNode;                    // Also set it as tail
        } else {
            tail->next = newNode;              // Link the new node at the end
            tail = newNode;                    // Update tail
        }
        current = current->next;               // Move to the next node
    }
    return newHead;                           // Return the head of the copied list
}

// Function to find the sum of elements in the linked list
int sumOfElements(struct Node* head) {
    int sum = 0;                               // Initialize sum
    struct Node* current = head;               // Pointer to traverse the list
    while (current != NULL) {
        sum += current->data;                  // Add current node's data to sum
        current = current->next;               // Move to the next node
    }
    return sum;                                // Return the total sum
}

// Function to count the number of nodes in the linked list
int countNodes(struct Node* head) {
    int count = 0;                             // Initialize count
    struct Node* current = head;               // Pointer to traverse the list
    while (current != NULL) {
        count++;                                // Increment count for each node
        current = current->next;               // Move to the next node
    }
    return count;                              // Return the total count
}

// Function to search for an element in the linked list
int searchElement(struct Node* head, int value) {
    struct Node* current = head;               // Pointer to traverse the list
    int index = 0;                             // Initialize index
    while (current != NULL) {
        if (current->data == value) {          // Check if the current node has the value
            return index;                      // Return the index if found
        }
        index++;                                // Increment index
        current = current->next;               // Move to the next node
    }
    return -1;                                  // Return -1 if not found
}

// Function to display the linked list
void displayLinkedList(struct Node* head) {
    struct Node* current = head;               // Pointer to traverse the list
    while (current != NULL) {
        printf("%d ", current->data);          // Print current node's data
        current = current->next;               // Move to the next node
    }
    printf("\n");                              // Print new line at the end
}

int main() {
    struct Node* head = NULL;                  // Initialize head of the linked list

    // Create Linked List
    insertAtLast(&head, 10);
    insertAtLast(&head, 20);
    insertAtLast(&head, 30);

    printf("Original Linked List: ");
    displayLinkedList(head);                   // Display the original linked list

    // Insert at first
    insertAtFirst(&head, 5);
    printf("After inserting 5 at the beginning: ");
    displayLinkedList(head);                   // Display the list after insertion

    // Insert in sorted order
    insertInSorted(&head, 25);
    printf("After inserting 25 in sorted order: ");
    displayLinkedList(head);                   // Display the list after sorted insertion

    // Delete element
    deleteElement(&head, 20);
    printf("After deleting 20: ");
    displayLinkedList(head);                   // Display the list after deletion

    // Copy Linked List
    struct Node* copiedList = copyLinkedList(head);
    printf("Copied Linked List: ");
    displayLinkedList(copiedList);             // Display the copied linked list

    // Sum of elements
    int sum = sumOfElements(head);
    printf("Sum of elements: %d\n", sum);      // Display the sum of elements

    // Count number of nodes
    int nodeCount = countNodes(head);
    printf("Number of nodes: %d\n", nodeCount); // Display the count of nodes

    // Search element
    int searchValue = 30;
    int searchResult = searchElement(head, searchValue);
    if (searchResult != -1) {
        printf("%d found at index %d\n", searchValue, searchResult); // Display the index of found element
    } else {
        printf("%d not found in the list\n", searchValue); // Display if element is not found
    }

    return 0; // Exit the program
}
