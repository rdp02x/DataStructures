#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h> // Include string.h for strlen function

// Structure to represent a stack
struct Stack {
    int top;       // Index of the top element in the stack
    int capacity;  // Maximum number of elements stack can hold
    int *array;    // Array to hold stack elements
};

// Function to create a new stack
struct Stack* createStack(int capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack)); // Allocate memory for the stack
    stack->capacity = capacity; // Set the capacity
    stack->top = -1;           // Initialize top to -1 (indicating an empty stack)
    stack->array = (int*)malloc(stack->capacity * sizeof(int)); // Allocate memory for stack elements
    return stack;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int value) {
    if (stack->top == stack->capacity - 1) { // Check for stack overflow
        printf("Stack Overflow\n");
        return;
    }
    stack->array[++stack->top] = value; // Increment top and add value to stack
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (stack->top == -1) { // Check for stack underflow
        printf("Stack Underflow\n");
        return -1;
    }
    return stack->array[stack->top--]; // Return top element and decrement top
}

// Function to evaluate a postfix expression
int evaluatePostfix(char* expression) {
    struct Stack* stack = createStack(strlen(expression)); // Create a stack with size equal to the expression length
    
    for (int i = 0; expression[i]; i++) { // Iterate through each character in the expression
        if (isdigit(expression[i])) { // Check if the character is a digit
            push(stack, expression[i] - '0'); // Convert char to int and push onto stack
        } else { // If the character is an operator
            int operand2 = pop(stack); // Pop the top two operands from the stack
            int operand1 = pop(stack);
            switch (expression[i]) {
                case '+': push(stack, operand1 + operand2); break; // Perform addition
                case '-': push(stack, operand1 - operand2); break; // Perform subtraction
                case '*': push(stack, operand1 * operand2); break; // Perform multiplication
                case '/': push(stack, operand1 / operand2); break; // Perform division
            }
        }
    }
    
    int result = pop(stack); // The result is the last element left in the stack
    free(stack->array); // Free allocated memory for the stack array
    free(stack);        // Free allocated memory for the stack
    return result;      // Return the result
}

int main() {
    char expression[] = "82+3*"; // Example postfix expression
    int result = evaluatePostfix(expression); // Evaluate the expression
    printf("Result: %d\n", result); // Output the result
    return 0; // Exit the program
}
