#include <stdio.h>
#include <stdlib.h>

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;   // Store the value of *a in temp
    *a = *b;         // Assign the value of *b to *a
    *b = temp;       // Assign the stored value in temp to *b
}

// Function to perform bubble sort
void bubbleSort(int arr[], int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {           // Loop through each element in array
        for (j = 0; j < n - i - 1; j++) {    // Iterate from the start to the last unsorted element
            if (arr[j] > arr[j + 1]) {       // If the current element is greater than the next
                swap(&arr[j], &arr[j + 1]);  // Swap the elements to order them correctly
            }
        }
    }
}

// Function to print the array
void printArray(int arr[], int n) {
    int i;
    for (i = 0; i < n; i++) {            // Loop through the array
        printf("%d ", arr[i]);           // Print each element
    }
    printf("\n");                        // Print newline after the array is displayed
}

int main() {
    int n;

    // Prompt user to enter the number of elements in the array
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Allocate memory dynamically for the array based on user input
    int* arr = (int*)malloc(n * sizeof(int));
    if (arr == NULL) {                       // Check if memory allocation was successful
        printf("Memory allocation failed\n");
        return 1;                            // Exit if allocation fails
    }

    // Prompt user to input each element
    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Print the original array before sorting
    printf("Original array: ");
    printArray(arr, n);

    // Sort the array using bubble sort
    bubbleSort(arr, n);

    // Print the sorted array
    printf("Sorted array: ");
    printArray(arr, n);

    // Free dynamically allocated memory
    free(arr);
    return 0;
}
